using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using Vidly.Dtos;
using Vidly.Models;
using System.Data.Entity;

namespace Vidly.Controllers.Api
{
    public class CustomersController : ApiController
    {
        private ApplicationDbContext _context;

        public CustomersController()
        {
            _context = new ApplicationDbContext();
        }

        // GET /api/customers
        public IHttpActionResult GetCustomers(string query = null)
        {
            // To return the customerdto object we need to use the IEnumerable extension Select() to Map the Customer object to the CustomerDto object
            var customersQuery = _context.Customers
                .Include(c => c.MembershipType);

            if (!String.IsNullOrWhiteSpace(query))
                customersQuery = customersQuery.Where(c => c.Name.Contains(query));

                var customerDtos = customersQuery
                .ToList()
                .Select(Mapper.Map<Customer, CustomerDto>);

            return Ok(customerDtos);
        }


        // Get /api/customers/1
        public IHttpActionResult GetCustomer(int id)
        {
            var customer = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customer == null)
            {
                return NotFound();
            }

            // Again here we return a CustomerDto object which is mapped from the Customer object
            return Ok(Mapper.Map<Customer, CustomerDto>(customer));
        }
        // POST /api/customers
        [HttpPost]
        // A bit different here - We take a CustomerDto object
        public IHttpActionResult CreateCustomer(CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest();
            }

            // Map the Customer object from the CustomerDto object
            var customer = Mapper.Map<CustomerDto, Customer>(customerDto);
            _context.Customers.Add(customer);
            _context.SaveChanges();

            // Because we need the ID which is generated by the database we add it to our Dto
            customerDto.Id = customer.Id;

            // And return the Dto with the ID
            //return customerDto;

            // We need return the Uri which we get from Request.RequestUri + the Id. And we also need to return the Dto object
            return Created(new Uri(Request.RequestUri + "/" + customer.Id.ToString()), customerDto);
        }

        // PUT /api/customers/1
        [HttpPut]
        public IHttpActionResult UpdateCustomer(int id, CustomerDto customerDto)
        {
            if (!ModelState.IsValid)
                return BadRequest();

            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            if (customerInDb == null)
                return NotFound();

            // Here we use two params to the method (Source object, target object) Because we already have an existing object(Which is loaded in to the _context)
            Mapper.Map(customerDto, customerInDb);            
            
            //These lines are no longer needed because we get the properties mapped from the Automapper
            //customerInDb.Name = customerDto.Name;
            //customerInDb.Birthday = customerDto.Birthday;
            //customerInDb.IsSubscribedToNewsletter = customerDto.IsSubscribedToNewsletter;
            //customerInDb.MembershipTypeId = customerDto.MembershipTypeId;

            _context.SaveChanges();

            return Ok();
        }

        // DELETE /api/customer/1
        [HttpDelete]
        public IHttpActionResult DeleteCustomer(int id)
        {
            // First single out the customer with the Id == id
            var customerInDb = _context.Customers.SingleOrDefault(c => c.Id == id);

            // If no customer found return NotFound error
            if (customerInDb == null)
                return NotFound();

            // If customer found delete that one
            _context.Customers.Remove(customerInDb);
            _context.SaveChanges();

            // And return ok message if customer got deleted correctly
            return Ok();
        }
    }
}
